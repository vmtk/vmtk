#
PROJECT_NAME           = "VMTK"

FULL_PATH_NAMES        = NO
WARN_IF_UNDOCUMENTED   = NO

GENERATE_TREEVIEW      = NO
GENERATE_TODOLIST      = YES
GENERATE_BUGLIST       = YES
GENERATE_HTML          = YES
GENERATE_HTMLHELP      = NO
GENERATE_LATEX         = NO
GENERATE_MAN           = NO
GENERATE_RTF           = NO
#GENERATE_TAGFILE      = "./VTK.tag"

HAVE_DOT               = YES
DOT_PATH               = @DOXYGEN_DOT_PATH@
DOT_IMAGE_FORMAT       = svg
HTML_FILE_EXTENSION    = .html
CLASS_GRAPH            = YES
COLLABORATION_GRAPH    = YES
TEMPLATE_RELATIONS     = YES
INCLUDE_GRAPH          = YES
INCLUDED_BY_GRAPH      = YES
CLASS_DIAGRAMS         = YES
CLASS_GRAPH            = YES
GENERATE_LEGEND        = YES
GRAPHICAL_HIERARCHY    = YES
MAX_DOT_GRAPH_DEPTH    = 10

ALLEXTERNALS           = NO

IMAGE_PATH             = "@VTK_VMTK_SOURCE_DIR@/Utilities/Doxygen" "@VTK_VMTK_BINARY_DIR@/Utilities/Doxygen/contrib"

OUTPUT_DIRECTORY       = "@VTK_VMTK_BINARY_DIR@/Utilities/Doxygen/doc"

INPUT                  = "@VTK_VMTK_BINARY_DIR@/Utilities/Doxygen/dox/Common" \
                         "@VTK_VMTK_BINARY_DIR@/Utilities/Doxygen/dox/ComputationalGeometry" \
                         "@VTK_VMTK_BINARY_DIR@/Utilities/Doxygen/dox/DifferentialGeometry" \
                         "@VTK_VMTK_BINARY_DIR@/Utilities/Doxygen/dox/Misc" \
                         "@VTK_VMTK_BINARY_DIR@/Utilities/Doxygen/dox/IO" \
                         "@VTK_VMTK_BINARY_DIR@/Utilities/Doxygen/dox/Segmentation" \
                         "@VTK_VMTK_SOURCE_DIR@/Utilities/Doxygen/doc_mainpage.dox"

#TAGFILES              = "/usr/local/src/CVS/BuildTrees/VTK/Utilities/Doxygen/vtk8.tag"=http://public.kitware.com/VTK/doc/nightly/html

EXTRACT_ALL            = YES
EXTRACT_PRIVATE        = NO
EXTRACT_STATIC         = YES
EXTRACT_LOCAL_CLASSES  = YES
HIDE_UNDOC_MEMBERS     = NO
HIDE_UNDOC_CLASSES     = NO
ALWAYS_DETAILED_SEC    = YES
SOURCE_BROWSER         = YES
INLINE_SOURCES         = YES
CASE_SENSE_NAMES       = YES
VERBATIM_HEADERS       = NO
SHOW_INCLUDE_FILES     = YES
SORT_MEMBER_DOCS       = NO
DISTRIBUTE_GROUP_DOC   = YES
TAB_SIZE               = 3
CLANG_ASSISTED_PARSING = YES

RECURSIVE              = YES
FILE_PATTERNS          = 
EXCLUDE                = 
EXCLUDE_PATTERNS       = *Win32Header*

HTML_ALIGN_MEMBERS     = YES
ALPHABETICAL_INDEX     = YES
COLS_IN_ALPHA_INDEX    = 3
# IGNORE_PREFIX        = vtkvmtk

ENABLE_PREPROCESSING   = YES
MACRO_EXPANSION        = YES
SEARCH_INCLUDES        = YES
INCLUDE_PATH           = 
EXPAND_ONLY_PREDEF     = NO
PREDEFINED  = "vtkSetMacro(name,type)= \
                 virtual void Set##name (type);" \
              "vtkGetMacro(name,type)= \
                 virtual type Get##name ();" \
              "vtkSetStringMacro(name)= \
                 virtual void Set##name (const char*);" \
              "vtkGetStringMacro(name)= \
                 virtual char* Get##name ();" \
              "vtkSetClampMacro(name,type,min,max)= \
                 virtual void Set##name (type);" \
              "vtkSetObjectMacro(name,type)= \
                 virtual void Set##name (type*);" \
              "vtkGetObjectMacro(name,type)= \
                 virtual type *Get##name ();" \
              "vtkBooleanMacro(name,type)= \
                 virtual void name##On (); \
                 virtual void name##Off ();" \
              "vtkSetVector2Macro(name,type)= \
                 virtual void Set##name (type, type); \
                 void Set##name (type [2]);" \
              "vtkGetVector2Macro(name,type)= \
                 virtual type *Get##name (); \
                 virtual void Get##name (type &, type &); \
                 virtual void Get##name (type [2]);" \
              "vtkSetVector3Macro(name,type)= \
                 virtual void Set##name (type, type, type); \
                 virtual void Set##name (type [3]);" \
              "vtkGetVector3Macro(name,type)= \
                 virtual type *Get##name (); \
                 virtual void Get##name (type &, type &, type &); \
                 virtual void Get##name (type [3]);" \
              "vtkSetVector4Macro(name,type)= \
                 virtual void Set##name (type, type, type, type); \
                 virtual void Set##name (type [4]);" \
              "vtkGetVector4Macro(name,type)= \
                 virtual type *Get##name (); \
                 virtual void Get##name (type &, type &, type &, type &); \
                 virtual void Get##name (type [4]);" \
               "vtkSetVector6Macro(name,type)= \
                 virtual void Set##name (type, type, type, type, \
                                         type, type); \
                 virtual void Set##name (type [6]);" \
               "vtkGetVector6Macro(name,type)= \
                  virtual type *Get##name (); \
                  virtual void Get##name (type &, type &, type &, \
                                          type &, type &, type &); \
                  virtual void Get##name (type [6]);" \
               "vtkSetVectorMacro(name,type,count)= \
                  virtual void Set##name(type data[]);" \
               "vtkGetVectorMacro(name,type,count)= \
                   virtual type *Get##name (); \
                   virtual void Get##name(type data[##count]);" \
               "vtkWorldCoordinateMacro(name)= \
                   virtual vtkCoordinate *Get##name##Coordinate (); \
                   virtual void Set##name(float x[3]); \
                   virtual void Set##name(float x, float y, float z); \
                   virtual float *Get##name();" \
               "vtkViewportCoordinateMacro(name)= \
                   virtual vtkCoordinate *Get##name##Coordinate (); \
                   virtual void Set##name(float x[2]); \
                   virtual void Set##name(float x, float y); \
                   virtual float *Get##name();" \
               "vtkTypeMacro(thisClass,superclass)= \
                   typedef superclass Superclass; \
                   private: \
                   virtual const char* GetClassNameInternal() const; \
                   public: \
                   static int IsTypeOf(const char *type); \
                   virtual int IsA(const char *type); \
                   static thisClass* SafeDownCast(vtkObjectBase *o); \
                   protected: \
                   virtual vtkObjectBase *NewInstanceInternal() const; \
                   public: \
                   thisClass *NewInstance() const;" \
               "VTK_LEGACY(x)= x" \
               "VTK_NEWINSTANCE=" \
               "VTK_ZEROCOPY=" \
               "VTK_EXPECTS(x)=" \
               "VTK_SIZEHINT(...)=" \
               "DOXYGEN_SHOULD_SKIP_THIS"
